Quick and dirty SQL/JDBC implementation for "Blueprints":https://github.com/tinkerpop/blueprints.

Written solely for the sake of it.

_Warning_: Current _mayor_ caveats:

* _Munges the db schema (automatically if certain parameters are given)_ - don't use this on a database not solely created for the purpose!!!
* Does no optimisations, like property caching, whatsoever
* Probably leaks resources
* Untested with databases other than H2 and Postgres
* Only supports primitive types and strings as property values
* Mmmn, probably lots more I haven't thought of...

To try this out in the Gremlin repl you need to put some jars on the Gremlin-Groovy standalone classpath:

* blueprints-sql-graph-1.0.jar (this thing)
* Your database driver, i.e. postgresql-9.1-901.jdbc4.jar, or h2.jar

If you're using a Gremlin distribution compiled from Github, these extra jars need to be copied to:

bc. $GREMLIN_HOME/gremlin-groovy/target/gremlin-groovy-2.4.0-SNAPSHOT-standalone/lib/

h3. Loading a graph in the Gremlin repl:

h4. H2 in-memory database:

bc. gremlin> import com.tinkerpop.blueprints.impls.sql.SqlGraph
gremlin> g = new SqlGraph(["sql.datasource.class": "org.h2.jdbcx.JdbcDataSource",
"sql.datasource.url": "jdbc:h2:mem:test"])
gremlin> g.createSchemaIfNeeded()
gremlin> v1 = g.addVertex()
gremlin> v1.addEdge("knows", g.addVertex())
gremlin> g.commit()

h4. Postgres:

For server DBs you *first* have to create an empty database, with a username/password. The graph can be loaded thusly:

bc. gremlin> import com.tinkerpop.blueprints.impls.sql.SqlGraph
==> ...
gremlin> g = new SqlGraph(["sql.datasource.class": "org.postgresql.ds.PGSimpleDataSource",
"sql.datasource.serverName": "example.com", "sql.datasource.databaseName": "blueprints", "sql.datasource.user": "...",
"sql.datasource.password": "..."])
gremlin> g.createSchemaIfNeeded()
==>null

The parameter for the constructor is a map specifying the class of the datasource + any additional properties of the
datasource and optionally the names of the tables to be used for storage:

* _sql.datasource.class_ - the name of the datasource class from some JDBC driver on the classpath
* _sql.datasource.*_ - any properties of the datasource can be passed using this prefix. E.g. sql.datasource.portNumber, sql.datasource.serverName, etc. See the documentation of the datasource for the list of available properties.
* _sql.verticesTable_ - the name of the vertices table. Defaults to "vertices".
* _sql.edgesTable_ - the name of the edges table. Defaults to "edges".
* _sql.vertexPropertiesTable_ - the name of the table for vertex properties. Defaults to "vertex_properties".
* _sql.edgePropertiesTable_ - the name of the table for edge properties. Defaults to "edge_properties".

h3. Potential optimisations.

This is more of a toy than an serious attempt at performant graph database backed by an RDBMS. As such, there are
no optimizations done either at the schema level or in the codebase above declaring indexes on frequently accessed
columns.
